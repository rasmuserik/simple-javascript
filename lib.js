// ##

let create = (() => {
  var _ref = _asyncToGenerator(function* () {
    // ##
    let fs = require('fs');
    let name = process.argv[3] || throwError('missing project name');
    fs.mkdirSync(name);
    process.chdir(name);

    write('.travis.yml', 'language: node_js\nnode_js:\n- node\n');
    fs.writeFileSync(dstName('package.json'), JSON.stringify({
      name: name,
      scripts: { release: 'simple-javascript release' },
      devDependencies: { 'simple-javascript': '*' }
    }));

    fs.writeFileSync(name + '.js', '/' + '/ # ' + name + '\n//\nconsole.log(\'hello\');\n');

    console.log('installing dependencies, please wait..');
    yield exec('yarn');
    yield exec('yarn release');

    yield exec('git init');
    yield exec('git add .');
    yield exec('git commit -am \'initial commit\'');
    yield exec('git remote add origin https://github.com/' + githubUser + '/' + name + '.git');
    //exec('git push -u origin master');
  });

  return function create() {
    return _ref.apply(this, arguments);
  };
})();

let release = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    // ##
    let fs = require('fs');
    console.log('building release.');
    let pkg = JSON.parse(fs.readFileSync(dstName('package.json'), 'utf-8'));

    pkg.scripts = pkg.scripts || {};
    pkg.scripts.release = pkg.scripts.release || 'simple-javascript release';
    pkg.scripts.dev = pkg.scripts.dev || 'simple-javascript dev';
    pkg.scripts.test = pkg.scripts.test || 'simple-javascript test';
    pkg.license = pkg.license || "MIT";
    pkg.main = pkg.main || 'lib.js';
    pkg.unpkg = pkg.unpkg || 'dist.js';
    pkg.devDependencies = pkg.devDependencies || { 'simple-javascript': '*' };
    pkg.repository = pkg.repository || `github:${githubUser}/${pkg.name}`;
    pkg.version = pkg.version || '0.0.0';
    pkg.homepage = pkg.homepage || projectDomain && `http://${pkg.name}.${projectDomain}` || `http://${githubUser}.github.io/${pkg.name}`;
    pkg.description = pkg.description || '';

    if (/^https?:\/\/[^/]*$/.test(pkg.homepage)) {
      write('CNAME', pkg.homepage.replace(/^https?:\/\//, '') + '\n');
    }

    let homepage = pkg.homepage ? '\n\n***See <' + pkg.homepage + '> for details.***\n' : '\n';
    let readme = autogen + '\n# ' + pkg.name + '\n' + pkg.description + homepage;
    write('README.md', readme);
    write('index.html', html(pkg));
    write('.gitignore', `#
# AUTOGENERATED FILE
#
node_modules/
dist.js.map
yarn.lock
npm-debug.log
`);
    write('.npmignore', `#
# AUTOGENERATED FILE
#
node_modules/
dist.js.map
yarn.lock
npm-debug.log
`);
    copyReplace('index.js');
    copyReplace('.babelrc');
    copyReplace('webpack.config.js');

    function copyReplace(fname) {
      fs.readFile(srcName(fname), 'utf-8', (err, str) => {
        if (err) throw err;
        write(fname, str.replace(/simple-javascript/g, pkg.name));
      });
    }

    yield exec('node_modules/babel-cli/bin/babel.js ' + ' --presets react,es2016,es2017 ' + pkg.name + '.js -o lib.js');
    yield exec('node_modules/webpack/bin/webpack.js --color');
    // Increase patch version

    pkg.version = pkg.version.replace(/\.[0-9]*$/, function (s) {
      return '.' + (1 + +s.slice(1));
    });
    write('package.json', JSON.stringify(pkg, '', 2) + '\n');
  });

  return function release() {
    return _ref2.apply(this, arguments);
  };
})();

let dev = (() => {
  var _ref3 = _asyncToGenerator(function* () {
    // ##
    exec('node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot --inline --color');
  });

  return function dev() {
    return _ref3.apply(this, arguments);
  };
})();

let test = (() => {
  var _ref4 = _asyncToGenerator(function* () {
    // ##
    console.log('`test` not implemented yet');
  });

  return function test() {
    return _ref4.apply(this, arguments);
  };
})();

let help = (() => {
  var _ref5 = _asyncToGenerator(function* () {
    // ##
    console.log(`usage:
  simple-javascript create app-name   # Creates new directory with app.
  simple-javascript release      # Builds the app in current directory.
  simple-javascript dev       # starts dev-server in current directory.`);
  });

  return function help() {
    return _ref5.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// # Simple JavaScript
//
// In a simple JavaScript library/app, you just create:
//
// - `package.json`
// - `$NAME.js`
// - `icon.png`
//
// Running `simple-javascript release` then increment patch-version in `package.json`, and (auto)generates:
//
// - `dist.js` packaged web version of the app with all dependencies included.
// - `dist.map.js` source map for dist.js
// - `.babelrc` temporary build config
// - `webpack-config.js` temporary build config
// - `README.md` documentation based on name, description and homepage in package.json
// - `lib.js` babel compiled version of the source, mapping ES6/ES7/JSX to plain ES5.
// - `index.js` loader used for building dist.*
// - `index.html` webpage containing element with id=app, and executing exports.main
// - `.gitignore` ignores unneeded files
//
// # Literate code
//

function throwError(e) {
  // ##
  throw new Error(e);
}

function html(pkg) {
  // ##
  return `<!DOCTYPE html>
<!--

  AUTOGENERATED FILE
  DO NOT EDIT

-->
<html>
  <head>
    <meta charset="utf-8">
    <title>${pkg.name}</title>
    <link rel=icon href=icon.png>
    <meta name="viewport" content="width=device-width">
    <style>
body {
  font-family: sans-serif;
}
    </style>
  </head>
  <body>
  <div>
    <img src=icon.png width=32 height=32 style=float:left;margin-right:16px>
    <strong>${pkg.name}</strong>
    <div>${pkg.description}</div>
  </div>
  <hr>
    <div id=app></div>
    <script>exports={};module={exports:exports};</script>
    <script src=./dist.js></script>
    <script>module.exports.main()</script>
    <script src=https://unpkg.com/ldoc></script>
  </body>
</html>`;
}
function exec(cmd) {
  // ##
  return new Promise((resolve, reject) => {
    let proc = require('child_process').exec(cmd, err => err ? reject(err) : resolve());
    proc.stdout.pipe(process.stdout);
    proc.stderr.pipe(process.stderr);
  });
}

let dstName = name => process.cwd() + '/' + name; // ##
let srcName = name => __dirname + '/' + name; // ##

let githubUser = process.env.GITHUB_ORG || // ##
process.env.GITHUB_USER || process.env.USER;
let projectDomain = process.env.PROJECT_DOMAIN; // ##
let autogen = '<!--\n\t\tAUTOGENERATED FILE\n\t\tDO NOT EDIT \n-->';;

function write(fname, data) {
  // ##
  let fs = require('fs');
  fs.writeFile(dstName(fname), data, 'utf-8', pass);
}

function pass() {} // ##

if (typeof process !== undefined && // ##
process.versions && process.versions.node) {
  let dispatch = { create, release, dev, test }[process.argv[2]] || help;
  dispatch().catch(e => {
    console.log(e);
    process.exit(-1);
  });
}

exports.main = () => console.log('this app should be run as a cli binary'); // ##
