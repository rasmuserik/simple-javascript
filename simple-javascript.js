#!/usr/bin/env node

// # Simple JavaScript
//
// Utility for making small apps and libraries.
//

function throwError(e) {
  throw new Error(e);
}

let fs = require('fs');
let dstName = (name) => process.cwd() + '/' + name;
let srcName = (name) => __dirname + '/' + name;
let exec = require('child_process').execSync;

let githubUser = process.env.GITHUB_ORG || 
  process.env.GITHUB_USER || process.env.USER;

let autogen = '<!--\n\t\tAUTOGENERATED FILE\n\t\tDO NOT EDIT \n-->';

async function create() {
  let name = process.argv[3] || throwError('missing project name');
  fs.mkdirSync(name);
  process.chdir(name);
  let pkg = {
    name,
    description: '',
    homepage: `https://github.com/${githubUser}/${name}`,
    version: '0.0.0',
    scripts: {
      release: 'simple-javascript release',
      dev: 'simple-javascript dev',
      test: 'simple-javascript test',
    },
    devDependencies: {
      "simple-javascript": "file:///home/rasmuserik/github/simple-javascript"
    },
    repository: "github:${githubUser}/${name}",
    license: "MIT",
    main: 'lib.js',
    browser: 'dist.js',
  };

  write('.travis.yml', 'language: node_js\nnode_js:\n- node\n');
  fs.writeFileSync(dstName('package.json'), 
    JSON.stringify(pkg));

  fs.writeFileSync(name + '.js',
    '/' + '/ # ' + name + '\n//\nconsole.log(\'hello\');\n');

  console.log('installing dependencies, please wait..');
  exec('yarn');

  release();
  exec('git init');
  exec('git add .');
  exec('git commit -am \'initial commit\'');
  exec('git remote add origin https://github.com/' +
    githubUser + '/' + name + '.git');
  //exec('git push -u origin master');
};

async function release() {
  console.log('building release.');
  let pkg = require(dstName('package.json'));
  let homepage = pkg.homepage ? '\n***See <' +
    pkg.homepage + '> for details.***\n\n' : '\n';
  let readme = autogen + '\n# ' + pkg.name + homepage + pkg.description;

  write('README.md', readme);
  copyReplace('index.html');
  copyReplace('index.js');
  copyReplace('.gitignore');
  copyReplace('.babelrc');
  copyReplace('webpack.config.js');

  function copyReplace(fname) {
    fs.readFile(srcName(fname), 'utf-8',
      (err, str) => {
        if(err) throw err;
        write(fname, str.replace(/simple-javascript/g, pkg.name));
      });
  }

  exec('node_modules/babel-cli/bin/babel.js ' +
    ' --presets react,es2016,es2017 ' +
    pkg.name + '.js -o lib.js');
  // Increase patch version

  pkg.version = pkg.version.replace(/\.[0-9]*$/,
    s => '.' + (1 + +s.slice(1)));
  write('package.json', JSON.stringify(pkg, '', 2));
}

function write(fname, data) {
  fs.writeFile(dstName(fname), data, 'utf-8', pass);
}

function dev() {
  console.log('`dev` not implemented yet');
}

function test() {
  console.log('`test` not implemented yet');
}

function help() {
  console.log(`usage:
  simple-javascript create app-name   # Creates new directory with app.
  simple-javascript release # Builds the app in current directory.
  simple-javascript dev       # starts dev-server in current directory.`);
}

function pass() { }

let dispatch = ({create, release, dev, test})[process.argv[2]] || help;
dispatch();
